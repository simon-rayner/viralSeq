#!/usr/bin/python
'''
Created on Dec 16, 2020

@author: simonray
'''

import logging

import numpy as np
import sys, getopt
import pandas as pd
import os
import scipy.stats

from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqUtils import GC

def main(argv):
    """generate bed tracks for GC and read coverage for a sliding window and step size

    Parameters:
    coverageFile (string): filename of coverage file generated by Samtools Coverage command
    window       (int)   : window size
    step         (int)   : step size
    genomeFile   (string): genome filename used as reference sequence for mapping

    Returns:
    BED files for GC and Read Coverage

    """    
    
    logging.basicConfig(level=logging.DEBUG)
    
    fileh = logging.FileHandler('logfile', 'a')
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    fileh.setFormatter(formatter)
    
    log = logging.getLogger()  # root logger
    for hdlr in log.handlers[:]:  # remove all old handlers
        log.removeHandler(hdlr)
    log.addHandler(fileh)      # set the new handler    
    logging.debug('This will get logged') 
    
  
    coverageFile = ''
    window = 5
    step = 1
    genomeLength = 60
    try:
        opts = getopt.getopt(argv, "hc:w:s:g:", ["coveragefile=","window=","step=", "genomelength="])
    except getopt.GetoptError:
        print ('calcWinCov.py -c <coveragefile> -w <window> -s <step> -g <genomelength>')
        sys.exit()
    for opt, arg in opts:
        if opt == '-h':
            print ('calcWinCov.py -c <coveragefile> -w <window> -s <step> -g <genomelength>')
            sys.exit()
        elif opt in ("-c", "--coveragefile"):
            coverageFile = arg
        elif opt in ("-w", "-window"):
            window = arg
        elif opt in ("-s", "-step"):
            step = arg
        elif opt in ("-g", "-genomelength"):
            genomeLength = arg
            
            
    if coverageFile == '':
        print()
        
    print("coverage file is <" + coverageFile + ">")
    print("window size is <" + str(window) + ">")
    print("step size is <" + str(step) + ">")
    print("genome length is <" + str(genomeLength) + ">")
    
    colPos = 1
    colCount = 2
    
            
    # read coverage file
    dfCoverage = pd.read_table(coverageFile, header=0)
    #dfLength = dfCoverage.size
    print(dfCoverage)
    print(str(dfCoverage.iloc[1, colCount]))
    #print(dfMiRNAData.columns.values)

    
    # create the results folder
    outputBaseName = os.path.basename(coverageFile)
    outputBaseName = os.path.splitext(outputBaseName)[0] + "_w" + str(window) + "s" + str(step)
    outputFile = os.path.join(os.path.dirname(coverageFile), outputBaseName + ".tsv")

        
    # initialize the lists
    
    # process the WT data

    dfWinAv = pd.DataFrame(columns = ["pos","average"])
    
    indexStart = 0 # start index for this window
    winStart = 0
    while indexStart < len(dfCoverage.index):

        index = indexStart
        posInGenome = dfCoverage.iloc[index, colPos]

        count = 0
        print("pos in Genome:" + str(posInGenome) +"indexStart:" + str(indexStart) + "\twin Start:" + str(winStart)  + "\tEnd" +  str(winStart + window))
            
        while (posInGenome >= winStart) and (posInGenome < winStart + window):
            thisPos = dfCoverage.iloc[index, colPos]
            thisCount = dfCoverage.iloc[index, colCount]
            
            count += dfCoverage.iloc[index, colCount]
            print("currPos:" + str(posInGenome) + "\tcurrCount" + str(thisCount) + "\ttotalCount" + str(count))
            index+=1
            if index == len(dfCoverage.index): break
            posInGenome = dfCoverage.iloc[index, colPos]
        
        
        if index > indexStart: # if this is true, the genome Pos was inside the window
            dfWinAv = dfWinAv.append({"pos": (winStart + window/2), "average": (count/window)}, ignore_index=True)  

        winStart+=step  
        if dfCoverage.iloc[indexStart, colPos] < winStart:
            indexStart = indexStart + 1            
            

                                                    
    dfWinAv.to_csv(os.path.join(os.path.dirname(coverageFile), outputFile), header=True)
    

    
    
    #for index, row in dfMut.iterrows():
    #    print(row, index)

def scanCoverage():
    print()
    
    
def readGenome():
    print()    
   
    
    
     
if __name__ == "__main__":
    main(sys.argv[1:])